//
//  ChatLogInteractor.swift
//  RealTimeChat
//
//  Created by Manuel Salvador del Águila on 26/06/2019.
//  Copyright (c) 2019 Manuel Salvador del Águila. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChatLogBusinessLogic
{
    func doSomething(request: ChatLog.Something.Request)
    func sendMessage(request: ChatLog.SendMessage.Request)
    func getTappedUser(request: ChatLog.GetTappedUser.Request)
    func loadMessagesForUserTapped(request: ChatLog.LoadMessagesForTappedUser.Request)
}

protocol ChatLogDataStore
{
    //var name: String { get set }
    var currentUser: UserClass? { get set }
    var userTapped: UserClass? { get set }
}

class ChatLogInteractor: ChatLogBusinessLogic, ChatLogDataStore
{
    var userTapped: UserClass?
    
    var currentUser: UserClass?
    
    var presenter: ChatLogPresentationLogic?
    var worker: ChatLogWorker?
    //var name: String = ""
    
    // MARK: Do something
    
    func doSomething(request: ChatLog.Something.Request)
    {
        worker = ChatLogWorker()
        worker?.doSomeWork()
        
        let response = ChatLog.Something.Response()
        presenter?.presentSomething(response: response)
    }
    
    func sendMessage(request: ChatLog.SendMessage.Request) {
        worker = ChatLogWorker()
        let newRequest = ChatLog.SendMessage.Request(message: request.message, userToSendMessage: currentUser!)
        worker?.sendMessage(request: newRequest, completion: {
            let response = ChatLog.SendMessage.Response()
            self.presenter?.messageSent(response: response)
        })
    }
    
    func getTappedUser(request: ChatLog.GetTappedUser.Request) {
        let response = ChatLog.GetTappedUser.Response(user: userTapped!)
        presenter?.getTappedUser(response: response)
    }
    
    func loadMessagesForUserTapped(request: ChatLog.LoadMessagesForTappedUser.Request) {
        worker = ChatLogWorker()
        let newRequest = ChatLog.LoadMessagesForTappedUser.Request(user: userTapped)
        worker?.loadMessagesForTappedUser(request: newRequest, completion: { (messages) in
            let response = ChatLog.LoadMessagesForTappedUser.Response(messages: messages)
            self.presenter?.presentMessagesForTappedUser(response: response)
        })
    }
}
