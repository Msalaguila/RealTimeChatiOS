//
//  ChatLogViewController.swift
//  RealTimeChat
//
//  Created by Manuel Salvador del Águila on 26/06/2019.
//  Copyright (c) 2019 Manuel Salvador del Águila. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase

protocol ChatLogDisplayLogic: class
{
    func displaySomething(viewModel: ChatLog.Something.ViewModel)
    func messageSent(viewModel: ChatLog.SendMessage.ViewModel)
    func displayTappedUser(viewModel: ChatLog.GetTappedUser.ViewModel)
    func displayMessagesForTappedUser(viewModel: ChatLog.LoadMessagesForTappedUser.ViewModel)
}

class ChatLogViewController: UIViewController, ChatLogDisplayLogic, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout
{
    var interactor: ChatLogBusinessLogic?
    var router: (NSObjectProtocol & ChatLogRoutingLogic & ChatLogDataPassing)?
    var mainView = ChatLogView()
    var currentTappedUser: User?
    
    var userCellID = "userCellID"
    var receiverCellID = "receiverCellID"
    
    var chatMessages = [Message]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ChatLogInteractor()
        let presenter = ChatLogPresenter()
        let router = ChatLogRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func setUpCollectionView() {
        mainView.chatLogCollectionView.delegate = self
        mainView.chatLogCollectionView.dataSource = self
        mainView.chatLogCollectionView.keyboardDismissMode = .interactive
        mainView.chatLogCollectionView.alwaysBounceVertical = true
        mainView.chatLogCollectionView.contentInset = UIEdgeInsets(top: 8, left: 0, bottom: 30, right: 0)
        mainView.chatLogCollectionView.scrollIndicatorInsets = UIEdgeInsets(top: 8, left: 0, bottom: 0, right: 0)
        
        mainView.chatLogCollectionView.register(UserChatLogCell.self, forCellWithReuseIdentifier: userCellID)
        mainView.chatLogCollectionView.register(ReceiverChatLogCell.self, forCellWithReuseIdentifier: receiverCellID)
    }
    
    // MARK: View lifecycle
    
    override func loadView() {
        super.loadView()
        view = mainView
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardShow),
                                               name: UIResponder.keyboardWillShowNotification, object: nil)
        
        setUpHandlers()
        setUpCollectionView()
        doSomething()
        getTappedUser()
        loadMessagesForTappedUser()
    }
    
    var i = 0
    
    @objc func handleKeyboardShow(notification: Notification) {
        print("Keyboard will show")
        print(i)
        mainView.heightConstraint?.isActive = false
        if i % 2 == 0 {
            mainView.heightConstraint = mainView.chatLogCollectionView.heightAnchor.constraint(equalTo: mainView.heightAnchor, multiplier: 0.83)
            scrollToLastItem()
        } else {
            mainView.heightConstraint = mainView.chatLogCollectionView.heightAnchor.constraint(equalTo: mainView.heightAnchor, multiplier: 0.5)
            UIView.animate(withDuration: 0, delay: 0, options: UIView.AnimationOptions.curveLinear, animations: {
                self.view.layoutIfNeeded()
            }) { (completed) in
                
            }
            scrollToLastItem()
        }
        i = i + 1
        mainView.heightConstraint?.isActive = true
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        
        // Remove the reference from the chat
        var currentUser = Auth.auth().currentUser?.uid
        Repository.getInstance().refInsideChat.child(currentUser!).removeObserver(withHandle: Repository.getInstance().handleRefInsideChat)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = ChatLog.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: ChatLog.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func loadMessagesForTappedUser() {
        let request = ChatLog.LoadMessagesForTappedUser.Request()
        interactor?.loadMessagesForUserTapped(request: request)
    }
    
    // MARK: Events
    
    // TODO: Check that the message is not empty
    @objc func sendButtonPressed() {
        if let message = textField.text {
            if !message.isEmpty {
                let request = ChatLog.SendMessage.Request(message: message)
                interactor?.sendMessage(request: request)
            }
        }
    }
    
    func getTappedUser() {
        let request = ChatLog.GetTappedUser.Request()
        interactor?.getTappedUser(request: request)
    }
    
    // MARK: Events replies
    
    func messageSent(viewModel: ChatLog.SendMessage.ViewModel) {
        textField.text = ""
        //        loadMessagesForTappedUser()
    }
    
    func displayTappedUser(viewModel: ChatLog.GetTappedUser.ViewModel) {
        navigationItem.title = viewModel.user.name
    }
    
    fileprivate func scrollToLastItem() {
        var row = chatMessages.count - 1
        var indexPath = IndexPath(row: row, section: 0)
        mainView.chatLogCollectionView.scrollToItem(at: indexPath, at: .bottom, animated: false)
    }
    
    func displayMessagesForTappedUser(viewModel: ChatLog.LoadMessagesForTappedUser.ViewModel) {
        chatMessages.removeAll()
        chatMessages = viewModel.messages
        mainView.chatLogCollectionView.reloadData()
        
        scrollToLastItem()
    }
    
    
    // MARK: Handlers
    
    func setUpHandlers() {
        mainView.sendButton.addTarget(self, action: #selector(sendButtonPressed), for: .touchUpInside)
        mainView.inputTextField.delegate = self
    }
    
    // MARK: Table View Methods
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return chatMessages.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let messageID = chatMessages[indexPath.item].fromID
        
        if messageID == Auth.auth().currentUser?.uid {
            
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: userCellID, for: indexPath) as! UserChatLogCell
            let message = chatMessages[indexPath.item]
            let messageText = message.message
            cell.message = message
            
            let estimatedWitdh = estimateFrameForText(messageText!).width
            cell.bubbleWidthAnchor?.constant = estimatedWitdh + 18
            
            return cell
        } else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: receiverCellID, for: indexPath) as! ReceiverChatLogCell
            let message = chatMessages[indexPath.item]
            let messageText = message.message
            cell.message = message
            
            let estimatedWitdh = estimateFrameForText(messageText!).width
            cell.bubbleWidthAnchor?.constant = estimatedWitdh + 18
            
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let message = chatMessages[indexPath.item]
        let messageText = message.message
        let rect = estimateFrameForText(messageText!)
        let height = rect.height + 20
        
        return CGSize(width: view.frame.width, height: height)
    }
    
    fileprivate func estimateFrameForText(_ text: String) -> CGRect {
        let size = CGSize(width: 200, height: 1000)
        let options = NSStringDrawingOptions.usesFontLeading.union(.usesLineFragmentOrigin)
        return NSString(string: text).boundingRect(with: size, options: options, attributes: convertToOptionalNSAttributedStringKeyDictionary([convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont.systemFont(ofSize: 16)]), context: nil)
    }
    
    // MARK: Input Text Field
    
    let textField = UITextField()
    
    lazy var inputContainerView: UIView = {
        let containerView = UIView()
        containerView.frame = CGRect(x: 0, y: 0, width: self.view.frame.width, height: 70)
        containerView.backgroundColor = .white
        
        textField.placeholder = "Enter message..."
        textField.delegate = self
        
        var sendButton = UIButton(type: .system)
        sendButton.setTitle("Send", for: .normal)
        sendButton.titleLabel?.font = UIFont.boldSystemFont(ofSize: 16)
        sendButton.addTarget(self, action: #selector(sendButtonPressed), for: .touchUpInside)
        
        var separatorLine = UIView()
        separatorLine.backgroundColor = .lightGray
        
        containerView.addSubviewForAutolayout(separatorLine)
        
        separatorLine.anchor(top: containerView.topAnchor, leading: containerView.leadingAnchor, bottom: nil, trailing: containerView.trailingAnchor, padding: UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0), size: CGSize(width: 0, height: 0.5))
        
        containerView.addSubviewForAutolayout(sendButton)
        
        sendButton.anchor(top: containerView.topAnchor, leading: nil, bottom: nil, trailing: containerView.trailingAnchor, padding: UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0), size: CGSize(width: 80, height: 50))
        
        containerView.addSubviewForAutolayout(textField)
        
        textField.anchor(top: containerView.topAnchor, leading: containerView.leadingAnchor, bottom: sendButton.bottomAnchor, trailing: sendButton.leadingAnchor, padding: UIEdgeInsets(top: 0, left: 12, bottom: 0, right: 0), size: CGSize(width: 0, height: 0))
        
        return containerView
    }()
    
    override var inputAccessoryView: UIView? {
        get {
            return inputContainerView
        }
    }
    
    override var canBecomeFirstResponder: Bool {
        get {
            return true
        }
    }
    
}

extension ChatLogViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        sendButtonPressed()
        return true
    }
}


// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertToOptionalNSAttributedStringKeyDictionary(_ input: [String: Any]?) -> [NSAttributedString.Key: Any]? {
    guard let input = input else { return nil }
    return Dictionary(uniqueKeysWithValues: input.map { key, value in (NSAttributedString.Key(rawValue: key), value)})
}

// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertFromNSAttributedStringKey(_ input: NSAttributedString.Key) -> String {
    return input.rawValue
}

