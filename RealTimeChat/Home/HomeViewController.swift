//
//  HomeViewController.swift
//  Firebase
//
//  Created by Manuel Salvador del Águila on 14/06/2019.
//  Copyright (c) 2019 Manuel Salvador del Águila. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
    func displaySomething(viewModel: Home.Something.ViewModel)
    func displayIsUserLoggedIn(viewModel: Home.IsUserLoggedIn.ViewModel)
    func displayLogoutUser(viewModel: Home.LogoutUser.ViewModel)
    func displayCurrentUser(viewModel: Home.GetCurrentUserLoggedIn.ViewModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUpNavBar()
        doSomething()
        view.backgroundColor = .white
    }
    
    var users = [UserClass]()
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        checkIfUserIsLoggedIn()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Home.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Home.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func checkIfUserIsLoggedIn() {
        let request = Home.IsUserLoggedIn.Request()
        interactor?.checkIfUserIsLoggedIn(request: request)
    }
    
    // MARK: Events
    
    @objc func logoutButtonPressed() {
        let request = Home.LogoutUser.Request()
        interactor?.logoutUser(request: request)
    }
    
    @objc func newMessageButtonPressed() {
        router?.routeToNewMessage()
    }
    
    // MARK: Events replies
    func displayIsUserLoggedIn(viewModel: Home.IsUserLoggedIn.ViewModel) {
        // User not logged in
        if !viewModel.isLogged {
            router?.routeToLogin()
        }
            
        // User logged in
        else {
            let request = Home.GetCurrentUserLoggedIn.Request()
            interactor?.getCurrentUser(request: request)
        }
    }
    
    func displayLogoutUser(viewModel: Home.LogoutUser.ViewModel) {
        router?.routeToLogin()
    }
    
    func displayCurrentUser(viewModel: Home.GetCurrentUserLoggedIn.ViewModel) {
        let userName = viewModel.user.name
        navigationItem.title = userName!
    }
}
