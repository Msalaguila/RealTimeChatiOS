//
//  LoginViewController.swift
//  Firebase
//
//  Created by Manuel Salvador del Águila on 14/06/2019.
//  Copyright (c) 2019 Manuel Salvador del Águila. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func displaySomething(viewModel: Login.Something.ViewModel)
    func userRegistered(viewModel: Login.RegisterButtonPressed.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    var loginView = LoginView()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func loadView() {
        view = loginView
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUpView()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Login.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Login.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func userRegistered(viewModel: Login.RegisterButtonPressed.ViewModel) {
        if viewModel.error {
            let alertController = UIAlertController(title: "Registration Failed", message: "An error has occured", preferredStyle: .alert)
            
            let defaultAction = UIAlertAction(title: "Dismiss", style: .default) { (a) in
                print(123)
            }
            
            alertController.addAction(defaultAction)
            
            present(alertController, animated: true, completion: nil)
        }
        
        else {
            let alertController = UIAlertController(title: "Registration Successful", message: "You have been registered succesfully", preferredStyle: .alert)
            
            let defaultAction = UIAlertAction(title: "Dismiss", style: .default) { (a) in
                print(123)
            }
            
            alertController.addAction(defaultAction)
            
            present(alertController, animated: true, completion: nil)
        }
        
        
    }
}

// MARK: Views
extension LoginViewController {
    
    func setUpView() {
        view.backgroundColor = UIColor(red: 61/255, green: 91/255, blue: 151/255, alpha: 1)
        loginView.registerButton.addTarget(self, action: #selector(registerButtonPressed), for: .touchUpInside)
    }
    
}

// MARK: Events

extension LoginViewController {
    
    @objc func registerButtonPressed() {
        guard let name = loginView.nameTextField.text else { return }
        guard let email = loginView.emailTextField.text else { return }
        guard let password = loginView.passwordTextField.text else { return }
        
        if password.count < 6 {
            let alertController = UIAlertController(title: "Password too short", message: "The password needs to have at least 6 characters", preferredStyle: .alert)
            
            let defaultAction = UIAlertAction(title: "Dismiss", style: .default) { (a) in
                print(123)
            }
            
            alertController.addAction(defaultAction)
            
            present(alertController, animated: true, completion: nil)
            return 
        }
        
        let request = Login.RegisterButtonPressed.Request(name: name, email: email, password: password)
        interactor?.registerUser(request: request)
    }
    
    
}
